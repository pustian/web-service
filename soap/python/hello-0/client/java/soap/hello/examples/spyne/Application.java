
package soap.hello.examples.spyne;

import java.math.BigInteger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Application", targetNamespace = "spyne.examples.hello.soap")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Application {


    /**
     * Docstrings for service methods appear as documentation in the wsdl.
     *         <b>What fun!</b>
     *         @param name: the name to say hello to
     *         @param times: the number of times to say hello
     *         @return  When returning an iterable, you can use any type of python iterable. Here, we chose to use generators.
     *         
     * 
     * @param times
     * @param name
     * @return
     *     returns soap.hello.examples.spyne.StringArray
     */
    @WebMethod(operationName = "say_hello", action = "say_hello")
    @WebResult(name = "say_helloResult", targetNamespace = "spyne.examples.hello.soap")
    @RequestWrapper(localName = "say_hello", targetNamespace = "spyne.examples.hello.soap", className = "soap.hello.examples.spyne.SayHello")
    @ResponseWrapper(localName = "say_helloResponse", targetNamespace = "spyne.examples.hello.soap", className = "soap.hello.examples.spyne.SayHelloResponse")
    public StringArray sayHello(
        @WebParam(name = "name", targetNamespace = "spyne.examples.hello.soap")
        String name,
        @WebParam(name = "times", targetNamespace = "spyne.examples.hello.soap")
        BigInteger times);

}
